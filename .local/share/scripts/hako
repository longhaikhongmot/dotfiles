#!/bin/sh

# HAKO - A pacman wrapper for declarative package managament
# ---
# This script will let you to manage user-installed packages through a text file
# Use hako command to see the usage

# Configuration
PACKAGES_FILE="$XDG_CONFIG_HOME/package/Pacmanfile"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check if pacman is available
check_pacman() {
    if ! command -v pacman &> /dev/null; then
        echo -e "${RED}Error: hako is only work with Arch-based system${NC}"
        exit 1
    fi
}

# Function to install a package
install_package() {
    local package="$1"
    echo -e "${YELLOW}Installing $package...${NC}"
    if sudo pacman -S --noconfirm "$package"; then
        echo -e "${GREEN}Successfully installed $package${NC}"
        return 0
    else
        echo -e "${RED}Failed to install $package${NC}"
        return 1
    fi
}

# Function to remove a package
remove_package() {
    local package="$1"
    echo -e "${YELLOW}Removing $package...${NC}"
    if sudo pacman -R --noconfirm "$package"; then
        echo -e "${GREEN}Successfully removed $package${NC}"
        return 0
    else
        echo -e "${RED}Failed to remove $package${NC}"
        return 1
    fi
}

# Function to get installed packages
get_installed_packages() {
    pacman -Q | cut -d' ' -f1
}

# Function to sync packages with the packages file
sync_packages() {
    # Create packages file if it doesn't exist
    if [ ! -f "$PACKAGES_FILE" ]; then
        touch "$PACKAGES_FILE"
        echo -e "${GREEN}Created new packages file: $PACKAGES_FILE${NC}"
    fi

    # Get current and desired state
    local installed_packages
    installed_packages=$(get_installed_packages)
    local desired_packages
    desired_packages=$(grep -v '^#' "$PACKAGES_FILE" | grep -v '^$')

    # Install missing packages
    while IFS= read -r package; do
        if ! echo "$installed_packages" | grep -q "^${package}$"; then
            install_package "$package"
        fi
    done <<< "$desired_packages"

    # Remove extra packages
    while IFS= read -r package; do
        # Skip system packages and base packages
        if [[ "$package" != *"-"* ]] && \
           [[ "$package" != "base" ]] && \
           [[ "$package" != "sudo" ]] && \
           ! grep -q "^${package}$" <<< "$desired_packages"; then
            remove_package "$package"
        fi
    done <<< "$installed_packages"
}

# Function to update all packages
update_system() {
    echo -e "${YELLOW}Updating system packages...${NC}"
    if sudo pacman -Syu --noconfirm; then
        echo -e "${GREEN}System update completed successfully${NC}"
    else
        echo -e "${RED}System update failed${NC}"
        exit 1
    fi
}

# Function to show package information
show_package_info() {
    local package="$1"
    echo -e "${YELLOW}Package information for $package:${NC}"
    pacman -Qi "$package" 2>/dev/null || echo -e "${RED}Package not found${NC}"
}

# Main script
hako() {
    check_pacman

    case "${1:-sync}" in
        "sync")
            sync_packages
            ;;
        "update")
            update_system
            ;;
        "list")
            echo -e "${YELLOW}Currently installed packages:${NC}"
            get_installed_packages
            ;;
        "info")
            if [ -z "$2" ]; then
                echo "Usage: $0 info <package-name>"
                exit 1
            fi
            show_package_info "$2"
            ;;
        *)
            echo "Usage: $0 [sync|update|list|info <package-name>]"
            echo
            echo "Commands:"
            echo "  sync   - Synchronize installed packages with $PACKAGES_FILE"
            echo "  update - Update all packages on the system"
            echo "  list   - Show currently installed packages"
            echo "  info   - Show detailed information about a specific package"
            exit 1
            ;;
    esac
}
